// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramMultiBot.Database;

#nullable disable

namespace TelegramMultiBot.Database.Migrations
{
    [DbContext(typeof(BoberDbContext))]
    [Migration("20251029230354_AddGroupSnapshotToJob")]
    partial class AddGroupSnapshotToJob
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TelegramMultiBot.Database.Models.AssistantSubscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MessageThreadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.BotMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrivateChat")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BotMessages");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ChatHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssistantId")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasLink")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasPhoto")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasVideo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("RepostedFrom")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.ToTable("ChatHistory");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ElectricityGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DataSnapshot")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LocationRegion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ElectricityGroups");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ElectricityHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ScheduleDay")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LocationId");

                    b.ToTable("ElectricityHistory");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ElectricityLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ElectricityLocations");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.Host", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UI")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Address", "Port");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ImageJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("BotMessageId")
                        .HasColumnType("int");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diffusor")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Finised")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InputImage")
                        .HasColumnType("longtext");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int?>("MessageThreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextTry")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PostInfo")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PreviousJobResultId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Progress")
                        .HasColumnType("double");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<string>("TextStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double?>("UpscaleModifyer")
                        .HasColumnType("double");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.JobResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("longtext");

                    b.Property<Guid>("JobId")
                        .HasColumnType("char(36)");

                    b.Property<double>("RenderTime")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobResult");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.Model", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<float>("CGF")
                        .HasColumnType("float");

                    b.Property<int>("CLIPskip")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sampler")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Scheduler")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Steps")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.MonitorJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeactivationReason")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDtekJob")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastScheduleUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastSentGroupSnapsot")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("MessageThreadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LocationId");

                    b.ToTable("Monitor");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ReminderJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileId")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int?>("MessageThreadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("NextExecution")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.Settings", b =>
                {
                    b.Property<string>("SettingSection")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingsKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingsValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SettingSection", "SettingsKey");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ChatHistory", b =>
                {
                    b.HasOne("TelegramMultiBot.Database.Models.AssistantSubscriber", "Assistant")
                        .WithMany("ChatHistory")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistant");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ElectricityHistory", b =>
                {
                    b.HasOne("TelegramMultiBot.Database.Models.ElectricityGroup", "Group")
                        .WithMany("History")
                        .HasForeignKey("GroupId");

                    b.HasOne("TelegramMultiBot.Database.Models.ElectricityLocation", "Location")
                        .WithMany("History")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.JobResult", b =>
                {
                    b.HasOne("TelegramMultiBot.Database.Models.ImageJob", "Job")
                        .WithMany("Results")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.MonitorJob", b =>
                {
                    b.HasOne("TelegramMultiBot.Database.Models.ElectricityGroup", "Group")
                        .WithMany("Jobs")
                        .HasForeignKey("GroupId");

                    b.HasOne("TelegramMultiBot.Database.Models.ElectricityLocation", "Location")
                        .WithMany("Jobs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.AssistantSubscriber", b =>
                {
                    b.Navigation("ChatHistory");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ElectricityGroup", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ElectricityLocation", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TelegramMultiBot.Database.Models.ImageJob", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
